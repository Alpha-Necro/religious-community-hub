name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: religious-community-hub
  DOCKER_TAG: latest
  KUBE_CONTEXT: production
  HELM_RELEASE: religious-community-hub
  ENVIRONMENT: production

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm install
      - run: npm run build
      - run: npm test
        env:
          CI: true

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm install
      - run: npm run security-scan
        env:
          CI: true

  docker-build:
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

  terraform-apply:
    needs: docker-build
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: true
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
      - run: terraform init
      - run: terraform plan -var-file=env/${{ env.ENVIRONMENT }}/terraform.tfvars
      - run: terraform apply -var-file=env/${{ env.ENVIRONMENT }}/terraform.tfvars -auto-approve

  k8s-deploy:
    needs: terraform-apply
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: azure/k8s-deploy@v1
        with:
          k8s-context: ${{ env.KUBE_CONTEXT }}
          namespace: default
          manifests: k8s/${{ env.ENVIRONMENT }}/*.yaml
          images: |
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

  helm-deploy:
    needs: k8s-deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: azure/k8s-helm-deploy@v1
        with:
          k8s-context: ${{ env.KUBE_CONTEXT }}
          namespace: default
          chart: charts/${{ env.HELM_RELEASE }}
          release: ${{ env.HELM_RELEASE }}
          values: values/${{ env.ENVIRONMENT }}/values.yaml

  post-deploy:
    needs: helm-deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: kubectl get pods -l app=${{ env.HELM_RELEASE }}
      - run: kubectl get services -l app=${{ env.HELM_RELEASE }}
      - run: kubectl get deployments -l app=${{ env.HELM_RELEASE }}
      - run: kubectl get statefulsets -l app=${{ env.HELM_RELEASE }}
      - run: kubectl get configmaps -l app=${{ env.HELM_RELEASE }}
      - run: kubectl get secrets -l app=${{ env.HELM_RELEASE }}

  rollback:
    needs: post-deploy
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - uses: actions/checkout@v2
      - run: kubectl rollout undo deployment ${{ env.HELM_RELEASE }}
      - run: helm rollback ${{ env.HELM_RELEASE }} 1
      - run: terraform destroy -var-file=env/${{ env.ENVIRONMENT }}/terraform.tfvars -auto-approve
